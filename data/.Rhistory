cesi <- data.frame(t(apply(cbind(ces1,ces2,ces3),2,quantile,probs=c(0.025,0.5,0.975))))
names(cesi) <- c("Lower","Median","Upper")
cesi$Observed <- c(ypredes1,ypredes2,ypredes3)
dfcal <- data.frame(cbind(cee1,cee2,cee3,ces1,ces2,ces3))
names(dfcal) <- c("Calibrated EE 1","Calibrated EE 2","Calibrated EE 3","Calibrated ES 1","Calibrated ES 2","Calibrated ES 3")
mdfcal <- melt(dfcal)
mdfcal$obs <- c(rep(ypredee1,nr),rep(ypredee2,nr),rep(ypredee3,nr),rep(ypredes1,nr),rep(ypredes2,nr),rep(ypredes3,nr))
mdfcal$true <- c(rep(xtrueee1,nr),rep(xtrueee2,nr),rep(xtrueee3,nr),rep(xtruees1,nr),rep(xtruees2,nr),rep(xtruees3,nr))
ggplot(data=mdfcal) + geom_histogram(aes(x=value),bins=20) + geom_vline(aes(xintercept=obs),colour="red") + geom_vline(aes(xintercept=true),colour="blue",linetype=2) + facet_wrap(~variable,scales="free") + theme_bw()
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[100],xee[296],xee[184])
cesi$Truth <- c(xes[100],xes[296],xes[184])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
mdfcal$obs
ypredee1
ypredee2
ypredee3
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[a],xee[296],xee[c])
cesi$Truth <- c(xes[a],xes[296],xes[c])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
print(xtable(cesi,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap $\\Delta$ES measurements for Skewed Errors",label="calibratedes"),include.rownames=FALSE)
install.packages("stran")
install.packages("rstan")
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda = sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy = beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
library(rstan)
?stan
library(StanHeaders)
?stan
sessionInfo()
library(rstan)
sessionInfo()
library(rstan)
library(StanHeaders)
sessionInfo()
library(rstan)
sessionInfo()
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(inline)
fx <- cxxfunction(signature(x = "numeric"),'NumericVector xx(x);
return wrap(std::accumulate(xx.begin(), xx.end(), 0.0));',plugin = "Rcpp")
fx(c(1,2,3))
library(rstan)
library(ggplot2)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
?solve
library(rstan)
?stan
library(dplyr)
library(reshape)
library(ggplot2)
library(gridExtra)
library(MASS)
library(scales)
setwd("C:\\Users\\dcries\\github\\bouts\\data")
bouts <- read.csv("finalbouts2rep.csv")
weights <- bouts %>% group_by(id) %>% filter(rep==1)
weights <- unlist(weights[,"B1BaseWeight"])
Za <- bouts %>% group_by(id) %>% filter(rep==1)
Za <- Za[,c("age","gender","bmi","smoke","education","black","hispanic")]
Za$education[Za$education <=3 ] <- 0
Za$education[Za$education >3 ] <- 1
Za$hispanic <- abs(Za$hispanic-2)
Za <- model.matrix(~age+as.factor(gender)+bmi+as.factor(smoke)+(education)+(black)+as.factor(hispanic),data=Za)
#Za[,2] <- scale(Za[,2])
#Za[,4] <- scale(Za[,4])
new <- bouts[,c("id","rep","nbouts","totalexcess")]
newm <- melt(new,id.vars=c("id","rep"))
newc <- cast(newm,id~rep+variable)
y1=as.matrix(newc[,c(2,4)]);y2=as.matrix(newc[,c(3,5)])
#x1tune=rowMeans(y1)
#x1tune[x1tune==0] <- 1
y1rowmean=rowMeans(y1)
y1rowmean[y1rowmean==0] <- 1
y1rowvar=apply(y1,1,var) #+ 1
y1rowvar[y1rowvar==0] <- 0.51
x1propb <- y1rowmean/y1rowvar
x1propa <- y1rowmean^2/y1rowvar
#mom estimator for et, alpha=407, beta=329
ncomp=3
data = list(Za=Za,Zb=Za,y1=y1,y2=y2)
init = list(currentbetay=c(1,0,0,0,0,0,0,0,0),currentbetax=c(6.4,-.006,0.57,-.04,-.19,0,0,0,0.48),currentalpha=rep(0,ncol(data$Zb)),
currentgamma=c(2.01,-0.012,0.578,-0.018,-0.011,0,0,0),currentsigma2y=0.95,currentsigma2x=6.73,
currenteta=1.23,currentx1=rowMeans(data$y1)+0.1,currentx2=rowMeans(data$y2)+1,
currentu=rep(0,nrow(data$y1)),gammatune=rep(0.000001,ncol(Za)),
propa=1,propb=0.5,propx2=1/0.05,vx2=rep(10,nrow(Za)),
x1propa=x1propa,x1propb=x1propb,
currenttheta=rep(1,1),betaxtune=c(1,rep(0.01,ncol(Za)-1),1),
propax2=1,propbx2=0.5,
currentlambda=0.5,propl1=5,propl2=23,
currentdelta=1,propd1=6.6,propd2=3.6,alphatune=rep(0.0000001,ncol(data$Zb)),
currentb=matrix(0,nrow=nrow(data$y1),ncol=2),btune=c(0.001,0.001),
currentSigmab=diag(2)*0.00000001,currentzeta=sample(1:ncomp,nrow(data$y1),TRUE),
currentpi=rep(1/ncomp,ncomp),currentm=apply(y1,1,max)+2,
currentsigma2b=0.01,currentb2=matrix(0,nrow=nrow(data$y1),ncol=3),
btune2=rep(0.001,3),currentSigmab2=diag(3)*0.01,currentb3=rep(0,nrow(data$y1)),
currentphi=.89)
load("C:/Users/dcries/workspace/assessmcmc_b.RData")
y1zeroboth <- sum(rowSums(y1)==0)
y1zeroeither <- sum(apply(y1,1,function(x){return(!0%in%x)}))
y1ones <- sum(y1==1)
y1twos <- sum(y1==2)
y1meanwpsd <- mean(apply(y1,1,sd))
y1wprange <- max(abs(apply(y1,1,function(x){return(x[2]-x[1])})))
y1overallrange <- max(y1)-min(y1)
y2zeroboth <- sum(rowSums(y2)==0)
y2zeroeither <- sum(apply(y2,1,function(x){return(!0%in%x)}))
y2greaterthan <- sum(y1[,1]*30+y2[,1]>450/7)
y1y2regcoef <- coef(lm((y2[,1]-y2[,2])~I(y1[,1]-y1[,2])+weekenddiff$diff))[2]
y1y2cor <- cor(c(y1[y1>0]),c(y2[y2>0]))
y2median <- median(c(y2[y2>0]))
y2mean <- mean(c(y2[y2>0]))
y2var <- var(c(y2[y2>0]))
y2q15 <- quantile(c(y2[y2>0]),probs=c(0.20))
y2q25 <- quantile(c(y2[y2>0]),probs=c(0.25))
y2q35 <- quantile(c(y2[y2>0]),probs=c(0.35))
y2q90 <- quantile(c(y2[y2>0]),probs=c(0.9))
y2q95 <- quantile(c(y2[y2>0]),probs=c(0.95))
y2q30 <- quantile(c(y2[y2>0]),probs=c(0.3))
y100 <- sum(apply(y1,1,function(x){return(x[1]==0 & x[2]==0)}))
y110 <- sum(apply(y1,1,function(x){return(x[1]==1 & x[2]==0)}))
y101 <- sum(apply(y1,1,function(x){return(x[1]==0 & x[2]==1)}))
y120 <- sum(apply(y1,1,function(x){return(x[1]>=2 & x[2]==0)}))
y102 <- sum(apply(y1,1,function(x){return(x[1]==0 & x[2]>=2)}))
y112 <- sum(apply(y1,1,function(x){return(x[1]==1 & x[2]>=2)}))
y121 <- sum(apply(y1,1,function(x){return(x[1]>=2 & x[2]==1)}))
y111 <- sum(apply(y1,1,function(x){return(x[1]==1 & x[2]==1)}))
y122 <- sum(apply(y1,1,function(x){return(x[1]>=2 & x[2]>=2)}))
probs <- c(y100,y110,y120,y101,y102,y111,y112,y121,y122)/sum(c(y100,y110,y120,y101,y102,y111,y112,y121,y122))
assess=assessln7$out
assess=assessln$out
obs <- c(median(assess$y100),median(assess$y110),median(assess$y120),median(assess$y101),
median(assess$y102),median(assess$y111),median(assess$y112),median(assess$y121),
median(assess$y122))
chisq.test(obs,p=probs)
q1 <- qplot(x=assess$y1zeroboth) + geom_vline(xintercept=y1zeroboth,colour="red") + theme_bw()
q2 <- qplot(x=assess$y1zeroeither) + geom_vline(xintercept=y1zeroeither,colour="red") + theme_bw()
q2b <- qplot(x=assess$y1ones) + geom_vline(xintercept=y1ones,colour="red") + theme_bw()
q2c <- qplot(x=assess$y1twos) + geom_vline(xintercept=y1twos,colour="red") + theme_bw()
q3 <- qplot(x=assess$y1meanwpsd) + geom_vline(xintercept=y1meanwpsd,colour="red") + theme_bw()
q4 <- qplot(x=assess$y1wprange,geom="bar") + geom_vline(xintercept=y1wprange,colour="red") + theme_bw()
#q5 <- qplot(x=assess$y1overallrange,geom="bar") + geom_vline(xintercept=y1overallrange,colour="red") + theme_bw()
q6 <- qplot(x=assess$y2greaterthan) + geom_vline(xintercept=y2greaterthan,colour="red") + theme_bw()
#q7 <- qplot(x=assess$y1y2regcoef) + geom_vline(xintercept=y1y2regcoef,colour="red") + theme_bw()
q7b <- qplot(x=assess$y1y2cor) + geom_vline(xintercept=y1y2cor,colour="red") + theme_bw()
q8 <- qplot(x=assess$y2median) + geom_vline(xintercept=y2median,colour="red") + theme_bw()
q9a <- qplot(x=assess$y2q15) + geom_vline(xintercept=y2q15,colour="red") + theme_bw()
q9b <- qplot(x=assess$y2q25) + geom_vline(xintercept=y2q25,colour="red") + theme_bw()
q9b2 <- qplot(x=assess$y2q30) + geom_vline(xintercept=y2q30,colour="red") + theme_bw()
q9c <- qplot(x=assess$y2q35) + geom_vline(xintercept=y2q35,colour="red") + theme_bw()
q10 <- qplot(x=assess$y2q90) + geom_vline(xintercept=y2q90,colour="red") + theme_bw()
q11 <- qplot(x=assess$y2q95) + geom_vline(xintercept=y2q95,colour="red") + theme_bw()
q12 <- qplot(x=assess$y2mean) + geom_vline(xintercept=y2mean,colour="red") + theme_bw()
q13 <- qplot(x=assess$y2var) + geom_vline(xintercept=y2var,colour="red") + theme_bw()
grid.arrange(q1,q2,q2b,q2c,q3,q4,q6,q7b,q8,q9a,q9b,q9c,q10,q11,q12,q13)
q1 <- qplot(x=assess$y1zeroboth) + geom_vline(xintercept=y1zeroboth,colour="red") + theme_bw()
q2 <- qplot(x=assess$y1zeroeither) + geom_vline(xintercept=y1zeroeither,colour="red") + theme_bw()
q2b <- qplot(x=assess$y1ones) + geom_vline(xintercept=y1ones,colour="red") + theme_bw()
q2c <- qplot(x=assess$y1twos) + geom_vline(xintercept=y1twos,colour="red") + theme_bw()
q3 <- qplot(x=assess$y1meanwpsd) + geom_vline(xintercept=y1meanwpsd,colour="red") + theme_bw()
q4 <- qplot(x=assess$y1wprange,geom="bar") + geom_vline(xintercept=y1wprange,colour="red") + theme_bw()
#q5 <- qplot(x=assess$y1overallrange,geom="bar") + geom_vline(xintercept=y1overallrange,colour="red") + theme_bw()
q6 <- qplot(x=assess$y2greaterthan) + geom_vline(xintercept=y2greaterthan,colour="red") + theme_bw()
#q7 <- qplot(x=assess$y1y2regcoef) + geom_vline(xintercept=y1y2regcoef,colour="red") + theme_bw()
q7b <- qplot(x=assess$y1y2cor) + geom_vline(xintercept=y1y2cor,colour="red") + theme_bw()
q8 <- qplot(x=assess$y2median) + geom_vline(xintercept=y2median,colour="red") + theme_bw()
q9a <- qplot(x=assess$y2q15) + geom_vline(xintercept=y2q15,colour="red") + theme_bw()
q9b <- qplot(x=assess$y2q25) + geom_vline(xintercept=y2q25,colour="red") + theme_bw()
q9b2 <- qplot(x=assess$y2q30) + geom_vline(xintercept=y2q30,colour="red") + theme_bw()
q9c <- qplot(x=assess$y2q35) + geom_vline(xintercept=y2q35,colour="red") + theme_bw()
q10 <- qplot(x=assess$y2q90) + geom_vline(xintercept=y2q90,colour="red") + theme_bw()
q11 <- qplot(x=assess$y2q95) + geom_vline(xintercept=y2q95,colour="red") + theme_bw()
q12 <- qplot(x=assess$y2mean) + geom_vline(xintercept=y2mean,colour="red") + theme_bw()
q13 <- qplot(x=assess$y2var) + geom_vline(xintercept=y2var,colour="red") + theme_bw()
grid.arrange(q1,q2,q2b,q2c,q3,q4,q8,q9a,q9b,q9c,q10,q11,q12,q13)
load("C:/Users/dcries/workspace/boutsmcmc_b.RData")
postcov <- do.call(cbind,mcmc)
postcov <- cor(with(mcmc,cbind(betay,gamma,phi,lambda,sigma2b)))
postcov[lower.tri(postcov)] <- 0
diag(postcov) <- 0
df <- expand.grid(x=1:ncol(postcov),y=1:ncol(postcov))
df$covar <- c(postcov)
ggplot(data=df,aes(x=as.factor(x),y=as.factor(y))) + geom_tile(aes(fill=covar)) +
#geom_text(aes(label=count)) + scale_fill_gradient(low = "white", high = "red")
scale_fill_gradient2(high="blue",low="red",mid="white")
postcov
nm <- data.frame(x=1:ncol(postcov),y=c(paste0("betay",1:ncol(mcmc$betay)),paste0("gamma",1:ncol(mcmc$gamma)),"phi","lambda",paste0("sigma2b",1:ncol(mcmc$sigma2b))))
nm
nm <- data.frame(x=1:ncol(postcov),y=c(paste0("betay",1:(ncol(mcmc$betay)+1)),paste0("gamma",1:ncol(mcmc$gamma)),"phi","lambda",paste0("sigma2b",1:ncol(mcmc$sigma2b))))
nm <- data.frame(x=1:(ncol(postcov)+1),y=c(paste0("betay",1:(ncol(mcmc$betay)+1)),paste0("gamma",1:ncol(mcmc$gamma)),"phi","lambda",paste0("sigma2b",1:ncol(mcmc$sigma2b))))
nm
head(Za)
summary(assessln$kspval)
