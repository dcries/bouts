dfcal <- data.frame(cbind(cee1,cee2,cee3,ces1,ces2,ces3))
names(dfcal) <- c("Calibrated EE 1","Calibrated EE 2","Calibrated EE 3","Calibrated ES 1","Calibrated ES 2","Calibrated ES 3")
mdfcal <- melt(dfcal)
mdfcal$obs <- c(rep(ypredee1,nr),rep(ypredee2,nr),rep(ypredee3,nr),rep(ypredes1,nr),rep(ypredes2,nr),rep(ypredes3,nr))
mdfcal$true <- c(rep(xtrueee1,nr),rep(xtrueee2,nr),rep(xtrueee3,nr),rep(xtruees1,nr),rep(xtruees2,nr),rep(xtruees3,nr))
ggplot(data=mdfcal) + geom_histogram(aes(x=value),bins=20) + geom_vline(aes(xintercept=obs),colour="red") + geom_vline(aes(xintercept=true),colour="blue",linetype=2) + facet_wrap(~variable,scales="free") + theme_bw()
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[100],xee[296],xee[184])
cesi$Truth <- c(xes[100],xes[296],xes[184])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
mdfcal$obs
ypredee1
ypredee2
ypredee3
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[a],xee[296],xee[c])
cesi$Truth <- c(xes[a],xes[296],xes[c])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
print(xtable(cesi,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap $\\Delta$ES measurements for Skewed Errors",label="calibratedes"),include.rownames=FALSE)
install.packages("stran")
install.packages("rstan")
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda = sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy = beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
library(rstan)
?stan
library(StanHeaders)
?stan
sessionInfo()
library(rstan)
sessionInfo()
library(rstan)
library(StanHeaders)
sessionInfo()
library(rstan)
sessionInfo()
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(inline)
fx <- cxxfunction(signature(x = "numeric"),'NumericVector xx(x);
return wrap(std::accumulate(xx.begin(), xx.end(), 0.0));',plugin = "Rcpp")
fx(c(1,2,3))
library(rstan)
library(ggplot2)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
?solve
library(rstan)
?stan
Rcpp::sourceCpp('C:/Users/dcries/github/bouts/bout_mcmc_nci7d.cpp')
library(dplyr)
library(reshape)
library(ggplot2)
library(gridExtra)
library(MASS)
library(scales)
source('C:/Users/dcries/github/bouts/rgenpois.R')
setwd("C:\\Users\\dcries\\github\\bouts\\data")
bouts <- read.csv("finalbouts2rep.csv")
Za <- bouts %>% group_by(id) %>% filter(rep==1)
Za <- Za[,c("age","gender","bmi","smoke","education","black","hispanic","oajob")]
Za$education[Za$education <=3 ] <- 0
Za$education[Za$education >3 ] <- 1
Za$hispanic <- abs(Za$hispanic-2)
Za <- model.matrix(~age+as.factor(gender)+bmi+as.factor(smoke)+(education)+(black)+as.factor(hispanic)+oajob,data=Za)
bouts2 <- bouts[!is.na(bouts$oajob),]
new2 <- bouts2[,c("id","rep","nbouts","totalexcess")]
newm2 <- melt(new2,id.vars=c("id","rep"))
newc2 <- cast(newm2,id~rep+variable)
y1=as.matrix(newc2[,c(2,4)]);y2=as.matrix(newc2[,c(3,5)])
data = list(Za=Za,Zb=Za,y1=y1,y2=y2)
data$y2[data$y2[,1]>0,1] <- data$y2[data$y2[,1]>0,1]/data$y1[data$y2[,1]>0,1]
data$y2[data$y2[,2]>0,2] <- data$y2[data$y2[,2]>0,2]/data$y1[data$y2[,2]>0,2]
Z1 <- rbind(data$Za,data$Za)
y1a <- c(data$y1)
m7 <- glm(y1a ~ as.matrix(Z1)+0,family=poisson)
#c(1,0,0,0,0,0,0,0)
Z = data.frame(rbind(data$Za[y2[,1]>0,],data$Za[y2[,2]>0,]))
#names(Z) <- c("int","age","gender","bmi","smoke","education","black","hispanic")
y = data$y2[data$y2>0]
m6 <- glm(y~as.matrix(Z)+0,family=Gamma(link=power(lambda=1/2)))
init = list(currentbetay=coef(m6),
currentgamma=coef(m7),currentsigma2y=0.95,currentsigma2x=6.73,
currenteta=1.23,currentx1=rowMeans(data$y1)+0.1,currentx2=rowMeans(data$y2)+1,
gammatune=rep(0.00000001,ncol(Za)),propa=1,propb=0.5,propx2=1/0.05,vx2=rep(10,nrow(Za)),
x1propa=x1propa,x1propb=x1propb,betaxtune=c(.001,rep(0.0001,ncol(Za)-1)),
propax2=1,propbx2=0.5,currentlambda=.5,propl1=1,propl2=1,
propd1=1,propd2=1,currentb=matrix(0,nrow=nrow(data$y1),ncol=2),btune=c(0.000001,0.000001),
currentSigmab=diag(2)*1, currentsigma2b=1,currentphi=.89)
prior = list(mu0y2=rep(0,ncol(data$Za)),mu0x1=rep(0,ncol(Za)),mu0x2=rep(0,ncol(Za)+1),
mu0a=rep(0,ncol(data$Zb)),V0y2=100*diag(ncol(data$Za)),V0x1=100*diag(ncol(Za)),
V0x2=100*diag(ncol(Za)+1),V0a=100*diag(ncol(data$Zb)),a0eta=1,b0eta=1,
a0x=1,b0x=1,a0y=1,b0y=1,
a0theta=1,b0theta=1,
a0l=1,b0l=1,
a0delta=1,b0delta=1, d0=4, D0=diag(2))
#Za <- bouts %>% group_by(id) %>% filter(rep==1) %>% select(age,gender,bmi,smoke,education,black,hispanic)
weights <- bouts %>% group_by(id) %>% filter(rep==1)
weights <- unlist(weights[,"B1BaseWeight"])
Za <- bouts %>% group_by(id) %>% filter(rep==1)
Za <- Za[,c("age","gender","bmi","smoke","education","black","hispanic")]
Za$education[Za$education <=3 ] <- 0
Za$education[Za$education >3 ] <- 1
Za$hispanic <- abs(Za$hispanic-2)
Za <- model.matrix(~age+as.factor(gender)+bmi+as.factor(smoke)+(education)+(black)+as.factor(hispanic),data=Za)
#Za[,2] <- scale(Za[,2])
#Za[,4] <- scale(Za[,4])
new <- bouts[,c("id","rep","nbouts","totalexcess")]
newm <- melt(new,id.vars=c("id","rep"))
newc <- cast(newm,id~rep+variable)
y1=as.matrix(newc[,c(2,4)]);y2=as.matrix(newc[,c(3,5)])
#x1tune=rowMeans(y1)
#x1tune[x1tune==0] <- 1
y1rowmean=rowMeans(y1)
y1rowmean[y1rowmean==0] <- 1
y1rowvar=apply(y1,1,var) #+ 1
y1rowvar[y1rowvar==0] <- 0.51
x1propb <- y1rowmean/y1rowvar
x1propa <- y1rowmean^2/y1rowvar
#mom estimator for et, alpha=407, beta=329
#
Za <- bouts %>% group_by(id) %>% filter(rep==1)
Za <- Za[,c("age","gender","bmi","smoke","education","black","hispanic","oajob")]
Za$education[Za$education <=3 ] <- 0
Za$education[Za$education >3 ] <- 1
Za$hispanic <- abs(Za$hispanic-2)
Za <- model.matrix(~age+as.factor(gender)+bmi+as.factor(smoke)+(education)+(black)+as.factor(hispanic)+oajob,data=Za)
bouts2 <- bouts[!is.na(bouts$oajob),]
new2 <- bouts2[,c("id","rep","nbouts","totalexcess")]
newm2 <- melt(new2,id.vars=c("id","rep"))
newc2 <- cast(newm2,id~rep+variable)
y1=as.matrix(newc2[,c(2,4)]);y2=as.matrix(newc2[,c(3,5)])
data = list(Za=Za,Zb=Za,y1=y1,y2=y2)
data$y2[data$y2[,1]>0,1] <- data$y2[data$y2[,1]>0,1]/data$y1[data$y2[,1]>0,1]
data$y2[data$y2[,2]>0,2] <- data$y2[data$y2[,2]>0,2]/data$y1[data$y2[,2]>0,2]
Z1 <- rbind(data$Za,data$Za)
y1a <- c(data$y1)
m7 <- glm(y1a ~ as.matrix(Z1)+0,family=poisson)
#c(1,0,0,0,0,0,0,0)
Z = data.frame(rbind(data$Za[y2[,1]>0,],data$Za[y2[,2]>0,]))
#names(Z) <- c("int","age","gender","bmi","smoke","education","black","hispanic")
y = data$y2[data$y2>0]
m6 <- glm(y~as.matrix(Z)+0,family=Gamma(link=power(lambda=1/2)))
init = list(currentbetay=coef(m6),
currentgamma=coef(m7),currentsigma2y=0.95,currentsigma2x=6.73,
currenteta=1.23,currentx1=rowMeans(data$y1)+0.1,currentx2=rowMeans(data$y2)+1,
gammatune=rep(0.00000001,ncol(Za)),propa=1,propb=0.5,propx2=1/0.05,vx2=rep(10,nrow(Za)),
x1propa=x1propa,x1propb=x1propb,betaxtune=c(.001,rep(0.0001,ncol(Za)-1)),
propax2=1,propbx2=0.5,currentlambda=.5,propl1=1,propl2=1,
propd1=1,propd2=1,currentb=matrix(0,nrow=nrow(data$y1),ncol=2),btune=c(0.000001,0.000001),
currentSigmab=diag(2)*1, currentsigma2b=1,currentphi=.89)
prior = list(mu0y2=rep(0,ncol(data$Za)),mu0x1=rep(0,ncol(Za)),mu0x2=rep(0,ncol(Za)+1),
mu0a=rep(0,ncol(data$Zb)),V0y2=100*diag(ncol(data$Za)),V0x1=100*diag(ncol(Za)),
V0x2=100*diag(ncol(Za)+1),V0a=100*diag(ncol(data$Zb)),a0eta=1,b0eta=1,
a0x=1,b0x=1,a0y=1,b0y=1,
a0theta=1,b0theta=1,
a0l=1,b0l=1,
a0delta=1,b0delta=1, d0=4, D0=diag(2))
Za <- bouts %>% group_by(id) %>% filter(rep==1)
Za <- Za[,c("age","gender","bmi","smoke","education","black","hispanic","oajob")]
Za$education[Za$education <=3 ] <- 0
Za$education[Za$education >3 ] <- 1
Za$hispanic <- abs(Za$hispanic-2)
Za <- model.matrix(~age+as.factor(gender)+bmi+as.factor(smoke)+(education)+(black)+as.factor(hispanic)+oajob,data=Za)
bouts2 <- bouts[!is.na(bouts$oajob),]
new2 <- bouts2[,c("id","rep","nbouts","totalexcess")]
newm2 <- melt(new2,id.vars=c("id","rep"))
newc2 <- cast(newm2,id~rep+variable)
y1=as.matrix(newc2[,c(2,4)]);y2=as.matrix(newc2[,c(3,5)])
data = list(Za=Za,Zb=Za,y1=y1,y2=y2)
data$y2[data$y2[,1]>0,1] <- data$y2[data$y2[,1]>0,1]/data$y1[data$y2[,1]>0,1]
data$y2[data$y2[,2]>0,2] <- data$y2[data$y2[,2]>0,2]/data$y1[data$y2[,2]>0,2]
Z1 <- rbind(data$Za,data$Za)
y1a <- c(data$y1)
m7 <- glm(y1a ~ as.matrix(Z1)+0,family=poisson)
#c(1,0,0,0,0,0,0,0)
Z = data.frame(rbind(data$Za[y2[,1]>0,],data$Za[y2[,2]>0,]))
#names(Z) <- c("int","age","gender","bmi","smoke","education","black","hispanic")
y = data$y2[data$y2>0]
m6 <- glm(y~as.matrix(Z)+0,family=Gamma(link=power(lambda=1/2)))
init = list(currentbetay=coef(m6),
currentgamma=coef(m7),currentsigma2y=0.95,currentsigma2x=6.73,
currenteta=1.23,currentx1=rowMeans(data$y1)+0.1,currentx2=rowMeans(data$y2)+1,
gammatune=rep(0.00000001,ncol(Za)),propa=1,propb=0.5,propx2=1/0.05,vx2=rep(10,nrow(Za)),
x1propa=x1propa,x1propb=x1propb,betaxtune=c(.001,rep(0.0001,ncol(Za)-1)),
propax2=1,propbx2=0.5,currentlambda=.5,propl1=1,propl2=1,
propd1=1,propd2=1,currentb=matrix(0,nrow=nrow(data$y1),ncol=2),btune=c(0.000001,0.000001),
currentSigmab=diag(2)*1, currentsigma2b=1,currentphi=.89)
prior = list(mu0y2=rep(0,ncol(data$Za)),mu0x1=rep(0,ncol(Za)),mu0x2=rep(0,ncol(Za)+1),
mu0a=rep(0,ncol(data$Zb)),V0y2=100*diag(ncol(data$Za)),V0x1=100*diag(ncol(Za)),
V0x2=100*diag(ncol(Za)+1),V0a=100*diag(ncol(data$Zb)),a0eta=1,b0eta=1,
a0x=1,b0x=1,a0y=1,b0y=1,
a0theta=1,b0theta=1,
a0l=1,b0l=1,
a0delta=1,b0delta=1, d0=4, D0=diag(2))
mcmc = mcmc_2part_nci7d(data=data,init=init,priors=prior,nrep=500000,burn=100000,thin=20)
save(mcmc,file="C:/Users/dcries/workspace/boutsmcmc_b1oay2avg.RData")
