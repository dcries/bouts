cee3 <- callibrate(ypredee3,dem3,as.matrix(latentxee),as.matrix(ree),as.matrix(betaee),as.matrix(gammaee),nk,ng,nr,min=1500,max=4500)
ceei <- data.frame(t(apply(cbind(cee1,cee2,cee3),2,quantile,probs=c(0.025,0.5,0.975))))
names(ceei) <- c("Lower","Median","Upper")
ceei$Observed <- c(ypredee1,ypredee2,ypredee3)
ces1 <- callibrate(ypredes1,dem1,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-300,max=200)
ces2 <- callibrate(ypredes2,dem2,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-150,max=100)
ces3 <- callibrate(ypredes3,dem3,as.matrix(latentxes),as.matrix(res),as.matrix(betaes),as.matrix(gammaes),nkes,nges,nr,min=-500,max=300)
cesi <- data.frame(t(apply(cbind(ces1,ces2,ces3),2,quantile,probs=c(0.025,0.5,0.975))))
names(cesi) <- c("Lower","Median","Upper")
cesi$Observed <- c(ypredes1,ypredes2,ypredes3)
dfcal <- data.frame(cbind(cee1,cee2,cee3,ces1,ces2,ces3))
names(dfcal) <- c("Calibrated EE 1","Calibrated EE 2","Calibrated EE 3","Calibrated ES 1","Calibrated ES 2","Calibrated ES 3")
mdfcal <- melt(dfcal)
mdfcal$obs <- c(rep(ypredee1,nr),rep(ypredee2,nr),rep(ypredee3,nr),rep(ypredes1,nr),rep(ypredes2,nr),rep(ypredes3,nr))
mdfcal$true <- c(rep(xtrueee1,nr),rep(xtrueee2,nr),rep(xtrueee3,nr),rep(xtruees1,nr),rep(xtruees2,nr),rep(xtruees3,nr))
ggplot(data=mdfcal) + geom_histogram(aes(x=value),bins=20) + geom_vline(aes(xintercept=obs),colour="red") + geom_vline(aes(xintercept=true),colour="blue",linetype=2) + facet_wrap(~variable,scales="free") + theme_bw()
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[100],xee[296],xee[184])
cesi$Truth <- c(xes[100],xes[296],xes[184])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
mdfcal$obs
ypredee1
ypredee2
ypredee3
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
names(ceei)[1:3] <- c("2.5%","50%","97.5%")
names(cesi)[1:3] <- c("2.5%","50%","97.5%")
ceei$Truth <- c(xee[a],xee[296],xee[c])
cesi$Truth <- c(xes[a],xes[296],xes[c])
print(xtable(ceei,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap EE measurements for Skewed Errors",label="calibratedee"),include.rownames=FALSE)
print(xtable(cesi,align="cccc|cc",caption="95\\% credible interval for calibration estimate for cheap $\\Delta$ES measurements for Skewed Errors",label="calibratedes"),include.rownames=FALSE)
install.packages("stran")
install.packages("rstan")
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 7
sx <- 5
xmax <- 6
beta0 <- 0
beta1 <- 1
lambda <- sx/(sx+su)
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
#x <- runif(n,0,xmax)
x <- c(rnorm(n/2),10+rexp(n/2,1))
y <- beta0 + beta1*x + eps
w1 <- x + u
w2 <- x + u2
w=matrix(c(w1,w2),ncol=2,byrow=FALSE)
data <- data.frame(y=y,x=x,w=w,w2=w2)
lm1 <- lm(y~x)
lm2 <- lm(y~w1)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda <- sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy <- beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
models <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w;
}
parameters{
real beta0;
real beta1;
real<lower=0> sigma2e;
real<lower=0> sigma2u;
real mux;
real<lower=0> sigma2x;
vector[n] x;
}
transformed parameters{
real<lower=0> lambda;
lambda = sigma2x/(sigma2x + sigma2u);
}
model{
vector[n] muy;
muy = beta0 + beta1*x;
y ~ normal(muy,sqrt(sigma2e));
w ~ normal(x,sqrt(sigma2u));
x ~ normal(mux,sqrt(sigma2x)); //noninformative prior for mux
beta0 ~ normal(0,1);
beta1 ~ normal(1,1);
sigma2e ~ inv_gamma(1,1);
sigma2u ~ inv_gamma(1,1);
sigma2x ~ inv_gamma(1,1);
//sigma2u ~ cauchy(0,1);  //note these are std dev, not var
//sigma2x ~ cauchy(0,1); //note these are std dev, not var
}
"
model3 <- stan_model(model_code=models)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
library(rstan)
?stan
library(StanHeaders)
?stan
sessionInfo()
library(rstan)
sessionInfo()
library(rstan)
library(StanHeaders)
sessionInfo()
library(rstan)
sessionInfo()
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
example("cxxfunction", package = "inline", run.dontrun = TRUE)
library(inline)
fx <- cxxfunction(signature(x = "numeric"),'NumericVector xx(x);
return wrap(std::accumulate(xx.begin(), xx.end(), 0.0));',plugin = "Rcpp")
fx(c(1,2,3))
library(rstan)
library(ggplot2)
library(rstan)
set.seed(50)
n <- 300
se <- 0.5
su <- 0.6
sx <- 5
xmax <- 10
beta0 <- 2
beta1 <- 3
beta2 <- -4
beta3 <- 0.6
eps <- rnorm(n,0,se)
u <- rnorm(n,0,su)
u2 <- rnorm(n,0,su)
x <- runif(n,0,xmax)
z1 <- runif(n,-12,-5)
z2 <- runif(n,23,37)
#x <- c(rnorm(n/2),5+rexp(n/2,1))
y <- beta0 + beta1*x + beta2*z1 +beta3*z2 + eps
w <- x + u
w2 <- x + u2
W <- matrix(c(w,w2),ncol=2,byrow=FALSE)
plot(x,y)
plot(w,y)
data <- data.frame(x=x,y=y,w=w,w2=w2,z1=z1,z2=z2)
model <- "
data{
int<lower=0> n;
vector[n] y;
vector[n] w1;
vector[n] w2;
vector[n] z1;
vector[n] z2;
//int ind[n];
}
parameters{
real b0;
real b1;
real b2;
real b3;
real<lower=0> sigmae;
real mux;
real<lower=0> sigmax;
real<lower=0> sigmau;
vector[n] x;
}
model{
y ~ normal(b0 + b1*x + b2*z1 + b3*z2,sigmae);
x ~ normal(mux,sigmax);
w1 ~ normal(x,sigmau);
w2 ~ normal(x,sigmau);
}
"
model2 = stan_model(model_code=model)
?solve
library(rstan)
?stan
Rcpp::sourceCpp('//my.files.iastate.edu/Users/dcries/Downloads/test.cpp')
Rcpp::sourceCpp('//my.files.iastate.edu/Users/dcries/Downloads/test.cpp')
Rcpp::sourceCpp('//my.files.iastate.edu/Users/dcries/Downloads/test.cpp')
Rcpp::sourceCpp('//my.files.iastate.edu/Users/dcries/Downloads/test.cpp')
Rcpp::sourceCpp('//my.files.iastate.edu/Users/dcries/Downloads/test.cpp')
Rcpp::sourceCpp('//my.files.iastate.edu/Users/dcries/Downloads/test.cpp')
Rcpp::sourceCpp('//my.files.iastate.edu/Users/dcries/Downloads/test.cpp')
a=10
b=5
summary(rgamma(10000,a,rate=b))
summary(gam(10000,a,b))
summary(rgamma(10000,a,rate=a/2))
summary(rgamma(10000,a,rate=a/2))
summary(gam(10000,a,a/2))
summary(gam(10000,a,a/2))
Rcpp::sourceCpp('//my.files.iastate.edu/Users/dcries/Downloads/test.cpp')
summary(gam(10000,a,2))
summary(gam(10000,a,10))
summary(rgamma(10000,a,rate=a/10))
library(dplyr)
library(reshape)
library(ggplot2)
library(gridExtra)
library(MASS)
setwd("C:\\Users\\dcries\\github\\bouts\\data")
bouts <- read.csv("finalbouts2rep.csv")
#Za <- bouts %>% group_by(id) %>% filter(rep==1) %>% select(age,gender,bmi,smoke,education,black,hispanic)
Za <- bouts %>% group_by(id) %>% filter(rep==1)
Za <- Za[,c("age","gender","bmi","smoke","education","black","hispanic")]
Za$education[Za$education <=3 ] <- 0
Za$education[Za$education >3 ] <- 1
Za$hispanic <- abs(Za$hispanic-2)
Za <- model.matrix(~age+as.factor(gender)+bmi+as.factor(smoke)+(education)+(black)+as.factor(hispanic),data=Za)
#Za[,2] <- scale(Za[,2])
#Za[,4] <- scale(Za[,4])
new <- bouts[,c("id","rep","nbouts","totalexcess")]
newm <- melt(new,id.vars=c("id","rep"))
newc <- cast(newm,id~rep+variable)
y1=as.matrix(newc[,c(2,4)]);y2=as.matrix(newc[,c(3,5)])
#x1tune=rowMeans(y1)
#x1tune[x1tune==0] <- 1
y1rowmean=rowMeans(y1)
y1rowmean[y1rowmean==0] <- 1
y1rowvar=apply(y1,1,var) #+ 1
y1rowvar[y1rowvar==0] <- 0.51
x1propb <- y1rowmean/y1rowvar
x1propa <- y1rowmean^2/y1rowvar
#mom estimator for et, alpha=407, beta=329
library(survival)
library(rjags)
Z = data.frame(rbind(data$Za[y2[,1]>0,],data$Za[y2[,2]>0,]))
names(Z) <- c("int","age","gender","bmi","smoke","education","black","hispanic")
y = y2[y2>0]
y1p = y1[y1>0]
Z = data.frame(rbind(data$Za[y2[,1]>0,],data$Za[y2[,2]>0,]))
data = list(Za=Za,Zb=Za,y1=y1,y2=y2)
Z = data.frame(rbind(data$Za[y2[,1]>0,],data$Za[y2[,2]>0,]))
names(Z) <- c("int","age","gender","bmi","smoke","education","black","hispanic")
y = y2[y2>0]
y1p = y1[y1>0]
model <- "model{
for(i in 1:n){
mu[i] <- (inprod(Z[i,],beta[]))^2
#y[i] ~ dgamma(delta,delta/mu[i])
y[i] ~ dweibull(delta,mu[i])
}
for(i in 1:k){
beta[i] ~ dnorm(0.01,1/100)
}
delta ~ dgamma(1,1)
}
"
dattp <- list(y=y,n=length(y),Z=cbind(as.matrix(Z),log(y1p)),k=ncol(Z)+1)
mtp = jags.model(textConnection(model), dattp,n.adapt=1000,n.chains=3)
rtp = coda.samples(mtp, c("delta","beta"), n.iter=1000)
summary(rtp)
plot(rtp[,"beta[2]"])
plot(rtp[,"beta[3]"])
gelman.diag(rtp)
plot(rtp[,"beta[9]"])
?dweibull
model <- "model{
for(i in 1:n){
mu[i] <- (inprod(Z[i,],beta[]))^2
#y[i] ~ dgamma(delta,delta/mu[i])
y[i] ~ dweibull(delta,1/mu[i])
}
for(i in 1:k){
beta[i] ~ dnorm(0.01,1/100)
}
delta ~ dgamma(1,1)
}
"
mtp = jags.model(textConnection(model), dattp,n.adapt=1000,n.chains=3)
rtp = coda.samples(mtp, c("delta","beta"), n.iter=1000)
summary(rtp)
gelman.diag(rtp)
plot(rtp[,"beta[9"])
plot(rtp[,"beta[9]"])
plot(rtp[,"beta[8]"])
plot(rtp[,"beta[1]"])
rtp = coda.samples(mtp, c("delta","beta"), n.iter=5000)
summary(rtp)
gelman.diag(rtp)
plot(rtp[,"beta[9]"])
plot(rtp[,"beta[8]"])
plot(rtp[,"beta[6]"])
model <- "model{
for(i in 1:n){
mu[i] <- (inprod(Z[i,],beta[]))^2
#y[i] ~ dgamma(delta,delta/mu[i])
y[i] ~ dweibull(delta,mu[i])
}
for(i in 1:k){
beta[i] ~ dnorm(0.01,1/100)
}
delta ~ dgamma(1,1)
}
"
mtp = jags.model(textConnection(model), dattp,n.adapt=2000,n.chains=3)
rtp = coda.samples(mtp, c("delta","beta"), n.iter=5000)
gelman.diag(rtp)
summary(rtp)
model <- "model{
for(i in 1:n){
mu[i] <- (inprod(Z[i,],beta[]))^2
#y[i] ~ dgamma(delta,delta/mu[i])
y[i] ~ dweibull(delta,1/mu[i])
}
for(i in 1:k){
beta[i] ~ dnorm(0.01,1/100)
}
delta ~ dgamma(1,1)
}
"
mtp = jags.model(textConnection(model), dattp,n.adapt=2000,n.chains=3)
rtp = coda.samples(mtp, c("delta","beta"), n.iter=5000)
gelman.diag(rtp)
